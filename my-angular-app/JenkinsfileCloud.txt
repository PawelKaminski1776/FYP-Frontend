pipeline {
    agent any

    tools {
        nodejs "NodeJS 22"  
    }

    environment {
        CI = "true"
        DOCKER_IMAGE = "angular-app"
        CONTAINER_NAME = "angular-container"
		GITHUB_TOKEN = credentials('github-api-token')
    }

    stages {
		stage('Initial Cleanup Workspace') {
            steps {
                script {
                    sh """
                        echo Cleaning up workspace...

                        # Remove everything except .git directory
                        find . -maxdepth 1 ! -name '.git' ! -name '.' -exec rm -rf {} +

                        echo Workspace cleanup completed.
                    """
                }
            }
        }
		
        stage('Checkout') {
            steps {
                checkout scm: [
                    $class: 'GitSCM', 
                    branches: [[name: '*/main']],
                    userRemoteConfigs: [[url: 'https://github.com/PawelKaminski1776/FYP-Frontend.git']]
                ]
            }
        }

        stage('Build Docker Image') {
            steps {
                dir('my-angular-app') {
                    sh "docker build -f Frontend.dockerfile -t ${DOCKER_IMAGE} ."
                }
            }
        }

        stage('Run Docker Container') {
            steps {
                sh """
                    docker stop ${CONTAINER_NAME} || true
                    docker rm ${CONTAINER_NAME} || true
                    docker run -d -p 80:80 --name ${CONTAINER_NAME} ${DOCKER_IMAGE}
                """
            }
        }
		
		stage('Checkout Tests') {
            steps {
                checkout scm: [
                    $class: 'GitSCM', 
                    branches: [[name: '*/main']],
                    userRemoteConfigs: [[url: 'https://github.com/PawelKaminski1776/FYP-Automation.git',
					credentialsId: 'github-api-token']]
                ]
            }
        }

        stage('Run Tests') {
            steps {
				dir('FYP-Automation') {
					sh "docker build --no-cache -f Automation.dockerfile -t ${DOCKER_IMAGE} ."
				}
            }
        }
		
		stage('Cleanup Workspace') {
            steps {
                script {
                    sh """
                        echo Cleaning up workspace...

                        # Remove everything except .git directory
                        find . -maxdepth 1 ! -name '.git' ! -name '.' -exec rm -rf {} +

                        echo Workspace cleanup completed.
                    """
                }
            }
        }

    }
}
